type Task {
    id: ID! @id
    type: TaskType
    data: Json
    deadline: DateTime
    
    completed: Boolean @default(value: false) # completed after the worker evaluates (deadline == today())
    active: Boolean @default(value: false) # active only after the client pays
    pendingInfluencers: [Influencer] @relation(name: "PendingTasksAndInfluencers")
    notifiedInfluencers: [Influencer] @relation(name: "NotifiedTasksAndInfluencers")
    activeInfluencers: [Influencer] @relation(name: "ActiveTasksAndInfluencers")
    
    # influencersToNotify
    # influencersToCheck
    # influencersToPay
}

enum TaskType {
    INSTAGRAM_POST
    INSTAGRAM_STORY
    FACEBOOK_POST
}

type Influencer {
    id: ID! @id
    bot: Boolean
    email: String @unique
    name: String
    surname: String
    password: String
    instagram: InstagramData @relation(link: INLINE)
    personal: PersonalData @relation(link: INLINE)
    pendingTasks: [Task] @relation(link: INLINE, name: "PendingTasksAndInfluencers")
    notifiedTasks: [Task] @relation(link: INLINE, name: "NotifiedTasksAndInfluencers")
    activeTasks: [Task] @relation(link: INLINE, name: "ActiveTasksAndInfluencers")
}

type PersonalData {
    id: ID! @id
    influencer: Influencer
    interests: [Interest] @relation(link: INLINE)
    bio: String
    age: Int
    sex: Sex
    state: String
    language: String
    latitude: Float
    longitude: Float
}

enum Sex {
    MALE
    FEMALE
    NONE
}

type Interest {
    id: ID! @id
    value: String
    sinonyms: [String]
}

type InstagramData {
    id: ID! @id
    influencer: Influencer
    username: String @unique
    followers: Int
    following: Int
    averageLikes: Float
    postFrequency: Float
    storyFrequency: Float
    frequentHashtags: [String]
    cookies: String # if i'm able to get those
    accessToken: String
}




